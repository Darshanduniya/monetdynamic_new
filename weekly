from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from datetime import datetime, timedelta, date
import pymonetdb
import subprocess
import logging

default_args = {
    'max_active_runs': 1,
    'retries': 3,
    'retry_delay': timedelta(seconds=30)
}

dag = DAG(
    "UK_HANDSHAKE",
    default_args=default_args,
    schedule_interval='*/10 * * * *',
    start_date=datetime(2023, 5, 14),
    catchup=False,
)

def read_industry_names(filename):
    with open(filename, 'r') as file:
        return [line.strip() for line in file]

def read_industries(filename):
    with open(filename, 'r') as file:
        return [line.strip() for line in file]

def read_monetdb_credentials(filename):
    credentials = {}
    with open(filename, 'r') as file:
        for line in file:
            key, value = line.strip().split('=')
            credentials[key] = value
    return credentials

# File paths
industry_names_file = '/path/to/industry_names.txt'
industries_file = '/path/to/industries.txt'
monetdb_credentials_file = '/path/to/monetdb_credentials.txt'

# Read industry names and industries from files
industry_names = read_industry_names(industry_names_file)
industries = read_industries(industries_file)

# Read MonetDB connection credentials from file
monetdb_credentials = read_monetdb_credentials(monetdb_credentials_file)

# Weekly job and monthly job lists
weekly_jobs = ['tec_pos_ikw', 'tec_pos_osw', 'apl_pos_opm', 'apl_pos_stm']
monthly_jobs = ['tec_pos_cet', 'tec_pos_bea']

def execute_monet_query(industry_name, industry, monetdb_credentials):
    conn = pymonetdb.connect(
        username=monetdb_credentials['username'],
        password=monetdb_credentials['password'],
        hostname=monetdb_credentials['hostname'],
        port=int(monetdb_credentials['port']),
        database=monetdb_credentials['database']
    )
    cursor = conn.cursor()

    query = f'''select count(*) from "execution_log" where operation_type='ab' and job_status='SUCCESS' and sys.str_to_date("execution_end_time",'%y-%m-%d')=current_date AND industry_name='{industry_name}' and flag='0' '''
    cursor.execute(query)

    results = cursor.fetchone()[0]
    results = int(results)

    query_two = f'''select offline_mart from "LATES_REFRESH_DETAILS" WHERE industry='{industry}' '''
    cursor.execute(query_two)

    result_two = cursor.fetchone()[0]
    print(result_two)

    if results > 0:
        if industry_name in weekly_jobs:
            job_type = 'weekly'
            print(f"{industry_name} is a weekly job")
        elif industry_name in monthly_jobs:
            job_type = 'monthly'
            print(f"{industry_name} is a monthly job")
        else:
            job_type = 'unknown'
            print(f"Unknown job type for {industry_name}")

        if results > 0 and result_two == 'B':
            if job_type == 'weekly':
                dag_id = f'{industry_name}_B'
                dag_state = subprocess.check_output(['airflow', 'dags', 'state', dag_id]).decode().strip()

                current_week_start = date.today() - timedelta(days=date.today().isoweekday() % 7)
                current_week = current_week_start.isocalendar()[1]

                if dag_state != 'running':
                    last_run_date_str = subprocess.check_output(['airflow', 'dags', 'state', dag_id, '-d', 'LAST_RUN']).decode().strip()
                    last_run_date = date.fromisoformat(last_run_date_str)
                    last_run_week_start = last_run_date - timedelta(days=last_run_date.isoweekday() % 7)
                    last_run_week = last_run_week_start.isocalendar()[1]

                    if last_run_week < current_week or (last_run_week == current_week and last_run_week_start <= current_week_start):
                        subprocess.run(['airflow', 'dags', 'trigger', dag_id])
                    else:
                        print(f"The DAG '{dag_id}' has already been triggered this week.")
                else:
                    print(f"The DAG '{dag_id}' is still running. Waiting...")

                # Pause the DAG until the next Monday
                next_monday = datetime.now() + timedelta(days=(7 - datetime.now().weekday()) % 7)
                print("Next Monday:", next_monday.strftime("%Y-%m-%d"))

    else:
        print("validation issue")

    cursor.close()
    conn.close()


# Create tasks dynamically
for industry_name, industry in zip(industry_names, industries):
    execute_query_task = PythonOperator(
        task_id=f'execute_monetdb_query_{industry_name}',
        python_callable=execute_monet_query,
        op_kwargs={
            'industry_name': industry_name,
            'industry': industry,
            'monetdb_credentials': monetdb_credentials
        },
        dag=dag
    )

# Define task dependencies if necessary
# execute_query_task1 >> execute_query_task2 >> ...
